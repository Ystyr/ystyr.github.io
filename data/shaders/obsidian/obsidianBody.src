//2D 3rd-order Worley
vec4 worl(in vec2 p, float t)
{
    vec2 g = floor(p); 
    vec2 o = vec2(0); 
    vec3 d = vec3(1);
    vec3 dp = vec3(1);
    float r = 0.;
    vec2 c = vec2(0);
    float dxprev = 8.;
    p -= g;
    for(int y = -1; y <= 1; y++){
        for(int x = -1; x <= 1; x++){
            o = vec2(x, y);
            o += hash22(g + o, t) - p;
            r = dot(o, o);
            
            d.z = max(d.x, max(d.y, min(d.z, r))); 
            d.y = max(d.x, min(d.y, r)); 
            d.x = min(d.x, r); 
        }
    }
    //d *= sqrt(d);  
    float result = min(smin(d.z, d.y, .2) - d.x, 1.);
    return vec4(result, d.xyz);
}


float getHMap (in float h) {
    float c = smoothstep(-0.08, fwidth(pow(h, 8.)) * 2., h - .18) * h;
    c -= (1. -smoothstep(-.2, fwidth(h) * 2., h - .22)) * c * .5; 
    return c;
}


void main()
{
    float scale = 5.;
    float t = T * .25;
    vec2 uv = (FRAG_XY * 2. - 1.) / RES.y * RES.xy;;
    vec2 gv = fract(uv * scale) - .5; 
    vec2 st = uv * scale;
    vec4 wv = worl(st + t, t);
    vec4 wf = worl(st + (uv) * rotate2d(t * 2.) * 0.008 + t, t);
    float wm = mix(wv.x, wf.x, .25);
    float ar = dSqrt(sin(st)) * .5 + .5;
    float h = wv.x;
    float c = getHMap(h);
    float c1 = getHMap(wf.x);
    float b = max((c1 - c), max(0., (c - c1) * .25)) * (16. + 1. - dSqrt(uv * 2.) * .5);
    vec3 lr1 = mix(vec3(h), wv.yzw, 1. - pow(h, ar)); 
    vec3 lr2 = pow(lr1 + b * wm, vec3(4. - c1));
    vec3 lr3 = abs(vec3(1,.5, c) - (lr1 * ((1.- b - c1)))) * (lr1 * b + b);
    vec3 lr4 = mix(lr1 * (b - c * b), lr1 * lr2 * lr3, 1. - wm) ;
    float gs = (lr3.x + lr3.y + lr3.z);
    vec3 col = lr4 * lr3 * lr1 * gs * 256.;
    col = mix(lr1, col, 1. - gs);
    FRAG_OUT = vec4(col, 1.);
}