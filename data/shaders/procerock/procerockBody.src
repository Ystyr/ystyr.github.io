#define MAX_STEPS 100
#define MAX_DIST 10.
#define SURF_DIST .001
#define LIGHT_DIR vec3(.2, 1.,-.2)

#define RED vec3(1, 0, 0)
#define ORN vec3(1, .5, 0)
#define YEL vec3(1, 1, 0)
#define GRN vec3(0, 1, 0)
#define BLU vec3(0, 0, 1)
#define VLT vec3(.5, 0, 1)

const vec3[] rainbow = vec3[6] (
    RED, ORN, YEL, GRN, BLU, VLT
);

vec3 background (vec3 d) {
    float t = u_time;
    vec3 dirM = vec3(d.x * cos01(d.z * 16. + d.y), d.y, d.z * sin01(d.x * 16. + d.y));
    float simp = dot(dirM, LIGHT_DIR) * .5 + .5;
    float bgl = simp;//min(min(simp * simp, timp), simp);
    float q = (bgl + sin01(bgl * 4. + t) * .85 + cos01(bgl * 8. + t) * .85);
    q += bgl;
    vec3 sky = vec3(.1, .4, .6) * q;
    float gray = dot(dirM, sky);
    sky = mix(sky * bgl * gray, sky * sky, 1.- d.y);
    return min(vec3(1), mix(sky, smoothstep(vec3(.5), vec3(1), sky), bgl));
}

vec4 getCatz (vec2 uv, float fr) 
{ 
    float t = u_time;
    float fx = 0.15667; ///!@ <- (1. - .06) / 6.;
    float fn = mod(floor(t * fr), 6.);
    vec2 st = vec2(.04 + fract(uv.x * 2.) * .5, uv.y);
    vec2 sto = st * vec2(1., 32.);
    vec2 guv = fract(sto);
    vec2 gid = floor(sto);
    vec2 auv = st;

    auv.x = fract(auv.x * 2.) * .5;
    auv.x *= step(fract(auv.x), fx);
    auv.x += fx * fn;
    
    float sfm = sin(st.x * 120. + t * fr);
    float a = step(7. + sfm, gid.y);
    vec3 rnbow = RED;
    for(int i = 1; i < 6; i++) {
        float w = step(7. + float(i) * 3. + sfm, gid.y);
        rnbow = mix(rnbow, rainbow[i], w);
    }
    float e = step(gid.y, 25. + sfm);
    vec4 col = vec4(rnbow, min(a, e) * pow(st.x * 2., 4.));
    vec4 sp = texture(u_sampler1, auv);
    col = mix(col, sp, sp.a);
    return col;
}

float getDist(vec3 p) {
    float t = T;  
    float d = mix(sdBox(p, vec3(1)), length(p)-1.5, sin(t) * .4 + .6);  
    vec2 uv = vec2(atan(p.x, p.z) / 6.2832, p.y / 3.) + .5;
    vec4 displMap = texture(u_sampler2, vec2(uv.x * 2. + t * .025, uv.y));
    float disp = mix(cos(p.y * 2. + t), dot(displMap, displMap) * .65, .5); 
    disp *= smoothstep(1., 0.8, abs(p.y)); 
    d -= disp * .3;  
    return d *.7;
}

vec3 getNormal(vec3 p) {
    float d = getDist(p);
    vec2 e = vec2(.001, 0); 
    vec3 n = d - vec3(
        getDist(p-e.xyy),
        getDist(p-e.yxy),
        getDist(p-e.yyx));   
    return normalize(n);
}

vec2 rayMarch(vec3 ro, vec3 rd) {
    float dO = 0.;  
    float h = 0.;  
    for(int i = 0; i < MAX_STEPS; i++) {
        vec3 p = ro + rd * dO; 
        float dS = getDist(p);
        dO += dS;
        h += float(i);
        if (dO > MAX_DIST || abs(dS) < SURF_DIST) break;
    }
    return vec2(dO, h);
}

void main ()
{
    vec2 uv = .6 * (FRAG_XY * 2. - 1.) / RES.y * RES.xy;
    vec2 m = MSE / RES;
    
    vec3 col = vec3(0);
    
    vec3 ro = vec3(0, 3, -3);
    ro.yz *= rotate2d(-m.y * PI + 1.);
    ro.xz *= rotate2d(-m.x * TWO_PI);
    
    vec4 catz = vec4(0.);
    vec3 rd = getRayDir(uv, ro, vec3(0), 1.);
    vec2 dh = rayMarch(ro, rd);
    float d = dh.x;
    float t = u_time;

    if (d < MAX_DIST) {
        vec3 p = ro + rd * d;
        vec3 n = getNormal(p);
        
        vec3 bgRefl = background(reflect(rd, normalize(n)));

        vec3 col_xy = texture(u_sampler0, halfDown(p.xy)).rgb;
        vec3 col_xz = texture(u_sampler0, halfDown(p.xz)).rgb;
        vec3 col_yz = texture(u_sampler0, halfDown(p.yz)).rgb;
        
        vec3 nm_xy = normalize(dot(col_xy, col_xy) * LIGHT_DIR * n);
        vec3 nm_xz = normalize(dot(col_xz, col_xz) * LIGHT_DIR * n);
        vec3 nm_yz = normalize(dot(col_yz, col_yz) * LIGHT_DIR * n);

        vec3 nn = abs(n);
        nn = pow(nn, vec3(5));
        nn /= nn.x + nn.y + nn.z;

        col = (col_xy * nn.z + col_xz * nn.y + col_yz * nn.x);
        vec3 normMap = (nm_xy * nn.z + nm_xz * nn.y + nm_yz * nn.x);

        float dif = dot(normMap - n * .45, normalize(LIGHT_DIR)) * .5 + .5;
        
        vec2 st = vec2(atan(p.x, p.z) / 6.2832, p.y / 3. * 2.) + .5;
        st.y = 1. - st.y;
        st.x = 1. - st.x;
        st.x -= u_time * .1;
        catz = getCatz(st, 12.);
        
        catz.a *= smoothstep(.6, .5, abs(p.y));
        col = mix(col, col * bgRefl, dif * col) * dif;
    }
    else 
        col = background(rd);

    ///!@ post procesing
    ///!@ vignette
    vec3 lum = vec3(.299, .587, .114);
    vec3 gray = vec3(dot(lum, col)) * .15;
    float dtuv = dot(uv, uv);
    col -= smoothstep(.0, 1., dtuv * .3);
    col = mix(col, gray, dtuv * .75);

    ///!@ tweaks
    float h = dh.y * (.00025 + 0.0002 * sin(t * .5)); 
    float w = (col.r + col.g + col.b);
    col -= sin(w * 10.) * gray * .5;
    col *= col * abs(col - w) * .75;
    col += vec3(w) * .3 + h * sin01(ro - rd + uv.xyy);
    
    col = mix(col, catz.rgb, catz.a * sin01(w));
    col = min(vec3(1.) - gray * .5, col);
    
    FRAG_OUT = vec4(col, 1.);
}