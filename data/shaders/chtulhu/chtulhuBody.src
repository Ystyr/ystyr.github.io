const float scale = 1.;
const vec2 ratio = vec2(10., 4.);
const vec3 lightDir = normalize(vec3(3.,2., 1));

void main ()
{   
    float t = T;
    vec2 uv = (FRAG_XY * 2. - 1.) / RES.y * RES.xy;
    vec2 st = uv * rotate2d(sin(t * .5) * .25) * scale;
    
    ///!@ create radial grid
    float a = atan(st.x, st.y) * PI2U1;
    float r = length(st);
    vec2 ar = vec2(a, r + t * .05) * ratio;
    vec2 rguv = fract(ar) - .5;
    vec2 rgid = floor(ar);

    float w = min(.3, r * (r * .65));
    float n = hash21(rgid) + No0;
    float s = sign(n - .5);
    
    rguv.x *= s;
    
    float gvs = rguv.x + rguv.y;
    vec2 cuv = rguv - sign(gvs + No0) * .5;
    
    float phi = atan(cuv.x, cuv.y);
    float isEvn = mod(rgid.x + rgid.y, 2.) * 2. - 1.;

    float d = length(cuv);
    float msk = smoothstep(.01,-.01, abs(d-.5) - w);
    
    float x = fract(isEvn * phi / 1.57 + t * .3);
    float y = (d - (.5 - w)) / (2. * w);
    y = abs(y - .5) * 2.;
    
    vec2 tuv = pow(vec2(x, y), vec2(1.3));
    vec3 col = texture2D(u_sampler0, tuv).rgb * msk;
    vec3 inv = 1. - col;
    
    ///!@ background
    float bgrml = cos(r * 16. - t);
    vec3 bgr = vec3((r * (1. - r * .75) * 2.)) + vec3(cos(a * 28.) * .125 + .125, .25, w) * (bgrml * 1.2 + 1.2); 
    vec3 bgrp = vec3(min(1., pow(r * .8, (abs(cos(a * (rguv.y) * 32.) * sin(a * rguv.x * 16.)))))) * .8;
    bgr -= min((1.-bgrp), mix(bgr, 1.- bgrp, 1.-r));
    bgrp = bgr * dot(bgr, bgrp);
    bgr *= bgrp;
    bgr = min(vec3(.75), bgr * .5);
    
    col = min(col, mix(col, inv, min(1., pow(r * 2. - 1.7, 6.))));
    //col = min(col, mix(col, inv, min(1., pow(r - y, 2. + x))));
    col *= 1. - tuv.y;

    ///!@ postprocessing
    float mag = (col.r + col.g + col.b) * .333;
    float magbg = dot(bgr, bgr);
    vec3 nm = cross(vec3(mag), lightDir * magbg); 
    float invR = 1. - r;
    bgr = mix(vec3(magbg), bgr, invR - magbg) * invR;
    bgr.rg *= invR * 1.5;
    col = mix(bgr, col, smoothstep(0., .05, mag));
    col -= sin(mag * invR * 128.) * pow(r, invR * 3.14) * (nm + invR) * .3;
    col *= smoothstep(1.7, .9, r) - invR * invR * .35;
    col = mix(col, vec3(min(mag, magbg * .125)) * bgr, r * .5);
    
    FRAG_OUT = vec4(col,1.0);
}