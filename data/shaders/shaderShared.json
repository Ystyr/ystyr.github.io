{
    "a_names": {
        "vertPos": "vertPos"
    },
    "u_names": {
        "resolution": "u_resolution",
        "mouse": "u_mouse",
        "time": "u_time",
        "sampler": "u_sampler",
        "transforms": "u_transform"
    },
    "v_names": {
        "uv": "texCoord"
    }, 
    "outFrag": "outColor",
    "defines": {
        "T": "${u_names.time}",
        "RES": "${u_names.resolution}",
        "FRAG_XY": "${v_names.uv}",
        "FRAG_OUT": "${outFrag}",
        "MSE": "${u_names.mouse}",
        "PI": 3.1415,
        "TWO_PI": 6.28318530718,
        "HALF_PI": 1.5708,
        "PI2U1": 0.1591,
        "No0": 0.000001
    },
    "methods": {
        "halfUp": [
            "float halfUp (in float val) {\n\treturn val * .5 + .5;\n}",
            "vec2 halfUp (in vec2 val) {\n\treturn val * .5 + vec2(.5);\n}",
            "vec3 halfUp (in vec3 val) {\n\treturn val * .5 + vec3(.5);\n}"
        ],
        "halfDown": [
            "float halfDown (in float val) {\n\treturn val * .5 - .5;\n}",
            "vec2 halfDown (in vec2 val) {\n\treturn val * .5 - vec2(.5);\n}",
            "vec3 halfDown (in vec3 val) {\n\treturn val * .5 - vec3(.5);\n}"
        ],
        "sin01": [
            "float sin01 (float val) {\n\treturn sin(float val) * .5 + .5;\n}",
            "float sin01 (vec2 val) {\n\treturn sin(vec2 val) * .5 + .5;\n}",
            "float sin01 (vec3 val) {\n\treturn sin(vec3 val) * .5 + .5;\n}"
        ],
        "cos01": [
            "float cos01 (float val) {\n\treturn cos(float val) * .5 + .5;\n}",
            "float cos01 (vec2 val) {\n\treturn cos(vec2 val) * .5 + .5;\n}",
            "float cos01 (vec3 val) {\n\treturn cos(vec3 val) * .5 + .5;\n}"
        ],
        "hash21": [
            "float hash21 (in vec2 st) {\n\tfloat offset = 43758.5453123;\n\tvec2 shift = vec2(12.9898, 78.233);\n\treturn fract(sin(dot(st.xy, shift)) * offset);\n}"
        ],
        "hash22": [
            "vec2 hash22 (vec2 st) {\n\tst = vec2(dot(st, vec2(127.1, 311.7)), dot(st, vec2(269.5, 183.3)));\n\treturn -1. + 2. * fract(sin(st) * 43758.5453123);\n}",
            "vec2 hash22 (vec2 p, float t) {\n\tvec3 a = fract(p.xyx * vec3(123.942, 234.341, 345.654));\n\ta += dot(a, a + vec3(34.457));\n\tp = fract(vec2(262144, 32768) * sin(dot(p, vec2(41, 289)))); \n\treturn sin(p * 6.2831853 + t) * .35 + .65;\n}"
        ],
        "noise": [
            "float noise (float x) {\n\tfloat i = floor(x);\n\tfloat f = fract(x);\n\tfloat u = f * f * (3. - 2. * f);\n\tfloat a = hash21(vec2(i));\n\tfloat b = hash21(vec2(i + 1.));\n\treturn mix(a, b, u);\n}"
        ],
        "dSqrt": [
            "float dSqrt (vec2 d) {\n\treturn dot(d, d);\n}",
            "float dSqrt (vec3 d) {\n\treturn dot(d, d);\n}",
            "float dSqrt (vec4 d) {\n\treturn dot(d, d);\n}"
        ],
        "rot2d": [
            "mat2 rotate2d (float angle) {\n\treturn mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n"
        ],
        "smin2d": [
            "float smin(float a, float b, float k) {\n\tfloat h = clamp(.5 + .5 * (b - a)/ k, 0., 1.);\n\treturn mix(b, a, h) - k * h * (1. - h);\n}"
        ],
        "sdBox": [
            "float sdBox(vec3 p, vec3 s) {\n\tp = abs(p) - s;\n\treturn length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);\n}"
        ],
        "noise2d": [
            "https://ystyr.github.io/data/shaders/methods/noise2d.src"
        ],
        "perlin": [
            "https://ystyr.github.io/data/shaders/methods/perlin.src"
        ],
        "getRayDir": [
            "https://ystyr.github.io/data/shaders/methods/getRayDir.src"
        ],
        "getNormal": [
            "https://ystyr.github.io/data/shaders/methods/getNormal.src"
        ],
        "rayMarch": [
            "https://ystyr.github.io/data/shaders/methods/rayMarch.src"
        ]
    } 
}