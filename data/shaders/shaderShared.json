{
    "version": "0.2.0",
    "a_names": {
        "vertPos": "vertPos"
    },
    "u_names": {
        "resolution": "u_resolution",
        "mouse": "u_mouse",
        "time": "u_time",
        "sampler": "u_sampler",
        "transforms": "u_transform"
    },
    "v_names": {
        "uv": "texCoord"
    }, 
    "methods": {
        "halfUp": [
            "float halfUp (in float val) {\n\treturn val * .5 + .5;\n}\n",
            "vec2 halfUp (in vec2 val) {\n\treturn val * .5 + .5;\n}\n",
            "vec3 halfUp (in vec3 val) {\n\treturn val * .5 + .5;\n}\n"
        ],
        "hash21": [
            "float hash21 (in vec2 st) {
                float offset = 43758.5453123;
                vec2 shift = vec2(12.9898, 78.233);
                return fract(sin(dot(st.xy, shift)) * offset);
            }"
        ],
        "hash22": [
            "vec2 hash22(vec2 st){
                st = vec2( dot(st, vec2(127.1, 311.7)),
                          dot(st, vec2(269.5, 183.3)) );
                return -1. + 2. * fract(sin(st) * 43758.5453123);
            }"
        ],
        "noise": [
            "float noise (float x) {
                float i = floor(x);
                float f = fract(x);
                float u = f * f * (3. - 2. * f);
                float a = hash21(vec2(i));
                float b = hash21(vec2(i + 1.));
                return mix(a, b, u);
            }"
        ],
        "noise2d": [
            "float noise2d (vec2 st) {
                vec2 i = floor(st);
                vec2 f = fract(st);
                vec2 u = f*f*(3.0-2.0*f);
                
                float a = hash21(i);
                float b = hash21(i + vec2(1, 0));
                float c = hash21(i + vec2(0, 1));
                float d = hash21(i + vec2(1, 1));
                
                return mix(a, b, u.x) + 
                    (c - a) * u.y * (1. - u.x) +
                    (d - b) * u.x * u.y;
            }"
        ],
        "perlin": [
            "float perlin(vec2 st) {
                vec2 i = floor(st);
                vec2 f = fract(st);
                vec2 u = f*f*(3.0-2.0*f);
                return mix( 
                    mix(dot(hash22(i + vec2(0,0)), f - vec2(0,0)),
                        dot(hash22(i + vec2(1,0)), f - vec2(1,0)), u.x),
                    mix(dot(hash22(i + vec2(0,1)), f - vec2(0,1)),
                        dot(hash22(i + vec2(1,1)), f - vec2(1,1)), u.x), 
                    u.y);
            }"
        ],
        "rot2d": [
            "mat2 rotate2d(float angle){
                return mat2(cos(angle),-sin(angle),
                            sin(angle),cos(angle));
            }"
        ]
    } 
}